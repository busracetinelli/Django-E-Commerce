# Generated by Django 2.0.9 on 2019-04-08 20:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='images/user/profile/', verbose_name='Profil Fotoğrafı')),
                ('gender', models.CharField(blank=True, choices=[('Erkek', 'Erkek'), ('Kadın', 'Kadın'), ('Belirtilmemiş', 'Belirtilmemiş')], max_length=100, null=True, verbose_name='Cinsiyet')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Doğum Tarihi')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biyografi')),
                ('phone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Telefon No')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Onaylandı')),
            ],
            options={
                'verbose_name': 'Kullanıcı',
                'verbose_name_plural': 'Tüm Kullanıcılar',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('DISAPPROVED', 'Onaylanmadı'), ('APPROVED', 'Onaylandı'), ('REFUNDED', 'Iade Edildi')], default='DISAPPROVED', max_length=128, verbose_name='Durum')),
                ('transaction_time', models.DateTimeField(auto_now_add=True, verbose_name='Ödeme Tarihi')),
                ('transaction_total_amount', models.FloatField(verbose_name='Toplam Ödeme')),
            ],
            options={
                'verbose_name': 'Sepet',
                'verbose_name_plural': 'Sepetler',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='İsim')),
                ('number', models.IntegerField(unique=True, verbose_name='İl Kodu')),
            ],
            options={
                'verbose_name': 'Şehir',
                'verbose_name_plural': 'Şehirler',
                'ordering': ('-number',),
            },
        ),
        migrations.CreateModel(
            name='CompanyAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='Adres', max_length=255, verbose_name='İsim')),
                ('open_address', models.TextField(max_length=100, verbose_name='Açık Adres')),
                ('short_address', models.TextField(max_length=70, verbose_name='Kısa Adres')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Posta Kodu')),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='X Koordinatı')),
                ('long', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Y Koordinatı')),
            ],
            options={
                'verbose_name': 'Adres',
                'verbose_name_plural': 'Adresler',
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='CompanyFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='İsim')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Reklamveren Özelliği',
                'verbose_name_plural': 'Reklamveren Özellikleri',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=24, verbose_name='Kupon Kodu')),
                ('discount_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='İndirim Oranı (Yüzde)')),
                ('is_active', models.BooleanField(default=False, verbose_name='Aktif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Yaratılma Tarihi')),
                ('limit', models.IntegerField(default=0, verbose_name='Kullanım Adedi')),
            ],
            options={
                'verbose_name': 'Kupon',
                'verbose_name_plural': 'Kuponlar',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Ürün Adı')),
                ('description', models.TextField(max_length=1000, verbose_name='Açıklama')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturma Tarihi')),
                ('thumbnail', models.ImageField(upload_to='images/product/', verbose_name='İsim')),
            ],
            options={
                'verbose_name': 'Ürün',
                'verbose_name_plural': 'Ürünler',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ProductBrand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Ürün Markası')),
            ],
            options={
                'verbose_name': 'Ürün Markası',
                'verbose_name_plural': 'Ürün Markaları',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=255, verbose_name='Ürün Kategorisi')),
            ],
            options={
                'verbose_name': 'Ürün Kategorisi',
                'verbose_name_plural': 'Ürün Kategorileri',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/product/', verbose_name='İsim')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.Product', verbose_name='Sofra')),
            ],
            options={
                'verbose_name': 'Ürün Resmi',
                'verbose_name_plural': 'Ürün Resimleri',
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='ProductStar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.Product', verbose_name='Sofra')),
            ],
            options={
                'verbose_name': 'Ürün Resmi',
                'verbose_name_plural': 'Ürün Resimleri',
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='ProductSubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_category', models.CharField(max_length=255, verbose_name='Ürün Kategorisi')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maincategory', to='djangoecommerce_app.ProductCategory', verbose_name='Ana Kategori')),
            ],
            options={
                'verbose_name': 'Ürün Alt Kategorisi',
                'verbose_name_plural': 'Ürün Alt Kategorileri',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('identity_number', models.CharField(blank=True, max_length=11, null=True, verbose_name='TC No')),
                ('executive_namesurname', models.CharField(blank=True, max_length=250, null=True, verbose_name='Yetkili Adı Soyadı')),
                ('executive_identity_number', models.CharField(blank=True, max_length=250, null=True, verbose_name='Yetkili TC No')),
                ('executive_email', models.CharField(blank=True, max_length=250, null=True, verbose_name='Yetkili Email')),
                ('executive_phone', models.CharField(blank=True, max_length=250, null=True, verbose_name='Yetkili Telefon Numarası')),
                ('mersis_no', models.CharField(blank=True, max_length=250, null=True, verbose_name='Mersis Numarası')),
                ('kep_address', models.CharField(blank=True, max_length=250, null=True, verbose_name='Kep Adresi')),
                ('tax_office', models.CharField(blank=True, max_length=250, null=True, verbose_name='Vergi Dairesi')),
                ('tax_number', models.CharField(blank=True, max_length=250, null=True, verbose_name='Vergi No')),
                ('legal_company_title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Yasal Şirket Ünvanı')),
                ('iban', models.CharField(blank=True, max_length=250, null=True, verbose_name='IBAN')),
                ('link_facebook', models.CharField(blank=True, max_length=250, null=True, verbose_name='Facebook Linki')),
                ('link_instagram', models.CharField(blank=True, max_length=250, null=True, verbose_name='Instagram Linki')),
                ('link_twitter', models.CharField(blank=True, max_length=250, null=True, verbose_name='Twitter Linki')),
                ('link_web', models.CharField(blank=True, max_length=250, null=True, verbose_name='Website Linki')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.CompanyAddress', verbose_name='Adres')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.City', verbose_name='Şehir')),
                ('features', models.ManyToManyField(blank=True, to='djangoecommerce_app.CompanyFeature', verbose_name='Reklamveren Şirket Özellikleri')),
            ],
            options={
                'verbose_name': 'Şirket',
                'verbose_name_plural': 'Şirketler',
            },
            bases=('djangoecommerce_app.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brand', to='djangoecommerce_app.ProductBrand', verbose_name='Ürün Markası'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.ProductCategory', verbose_name='Ürün Tipi'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='guests',
            field=models.ManyToManyField(blank=True, related_name='guests', to=settings.AUTH_USER_MODEL, verbose_name='Kullananlar'),
        ),
        migrations.AddField(
            model_name='card',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Sahibi'),
        ),
        migrations.AddField(
            model_name='card',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.Product', verbose_name='Ürün'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='productimage',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='djangoecommerce_app.Company', verbose_name='Sahibi'),
        ),
        migrations.AddField(
            model_name='product',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='djangoecommerce_app.Company', verbose_name='Ürün Sahibi'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='companies',
            field=models.ManyToManyField(blank=True, related_name='companies', to='djangoecommerce_app.Company', verbose_name='Kullanılabilir Restoranlar'),
        ),
    ]
